# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os
from pathlib import Path

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)

def find_all_sources(path):
    output = []
    for something in path.iterdir():
        if something.is_dir():
            for string in find_all_sources(something):
                output.append(f"{something.name}/{string}")
        else:
            if not something.name.endswith('.cpp'):
                continue
            output.append(something.name)
    return output

for sdk_name in MMSPlugin.sdks:
  for cxx in MMSPlugin.all_targets:
    sdk = MMSPlugin.sdks[sdk_name]

    if not cxx.target.arch in sdk.platformSpec[cxx.target.platform]:
      continue

    binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

    current_file = Path('..')
    current_file = current_file / 'src'
    if not current_file.exists():
        raise RuntimeError(f"Can't find src folder. Searching in: {current_file.parent.absolute()}")

    if sdk_name in ['dota', 'cs2']:
      binary.sources += [
      os.path.join(sdk.path, 'tier1', 'convar.cpp'),
      os.path.join(sdk.path, 'public', 'tier0', 'memoverride.cpp'),
    ]

    if cxx.target.arch == 'x86':
      binary.sources += ['sourcehook/sourcehook_hookmangen.cpp']
    nodes = builder.Add(binary)
    MMSPlugin.binaries += [nodes]

    binary.sources += [f"src/{i}" for i in find_all_sources(current_file)]
    
  break
